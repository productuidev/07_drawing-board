{"mappings":"AAAA,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAEnB,MAAM,YAAY;IAChB,IAAI,GAAG,MAAM,CAAC;IACd,WAAW,GAAG,KAAK,CAAC;IACpB,WAAW,GAAG,SAAS,CAAC;IACxB,eAAe,GAAG,SAAS,CAAC;IAC5B,kBAAkB,GAAG,KAAK,CAAC;IAC3B,SAAS,GAAG,EAAE,CAAC;IACf,WAAW,CAAC;IACZ,QAAQ,CAAC;IACT,SAAS,CAAC;IACV,OAAO,CAAC;IACR,aAAa,CAAC;IACd,YAAY,CAAC;IACb,aAAa,CAAC;IACd,kBAAkB,CAAC;IACnB,QAAQ,CAAC;IACT,WAAW,CAAC;IACZ,yBAAyB,CAAC;IAC1B,gBAAgB,CAAC;IACjB,MAAM,CAAC;IACP,OAAO,CAAC;IAER,aAAc;QACZ,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjC,IAAI,CAAC,QAAQ,EAAE,CAAC;KACjB;IAED,aAAa,GAAG;QACd,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACxD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACtD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAClE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAClE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACnE,IAAI,CAAC,kBAAkB,GACrB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC9D,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAC3E,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;KACvD;IAED,YAAY;IACZ,WAAW,GAAG;QACZ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KAC/C;IAED,8CAA8C;IAC9C,yBAAyB,GAAG;QAC1B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,+DAA+D;KACxI;IAED,QAAQ,GAAG;QACT,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACzE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACrE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,aAAa,CAAC,gBAAgB,CACjC,OAAO,EACP,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAClC,CAAC;QACF,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAC/B,OAAO,EACP,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CACjC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KACtE;IAED,UAAU,GAAG;QACX,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,OAAO,CAAC,4BAA4B;QAC9D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,0BAA0B;IAC1B,aAAa,CAAC,MAAK,EAAE;QACnB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,eAAe,GAAG,MAAK,CAAC,MAAM,CAAC,KAAK,CAAC;KACpE;IAED,4BAA4B;IAC5B,iBAAiB,CAAC,MAAK,EAAE;QACvB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,MAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,MAAK,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;KAClE;IAED,YAAY;IACZ,WAAW,CAAC,MAAK,EAAE;QACjB,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,OAAO,CAAC,4BAA4B;QAC9D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAK,CAAC,AAAC;QAErD,aAAa;QACb,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC,QAAQ;QAClC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY;QACvE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,KAAK;QAErC,gDAAgD;QAChD,qCAAqC;QACrC,wDAAwD;QACxD,gCAAgC;QAEhC,WAAW;QACX,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,UAAU;YAC/D,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,aAAa;SACjE,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACjC,mCAAmC;YACnC,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC;SAC7B;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;KAClB;IAED,aAAa;IACb,WAAW,CAAC,MAAK,EAAE;QACjB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,2BAA2B;QAE1D,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAK,CAAC,AAAC;QACrD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY;QACvE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM;KAC9B;IAED,8BAA8B;IAC9B,SAAS,GAAG;QACV,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,OAAO,CAAC,4BAA4B;QAC9D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,SAAS;IACT,gBAAgB,CAAC,MAAK,EAAE;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EAAE,AAAC,EAAC,WAAW;QACrE,OAAO;YACL,CAAC,EAAE,MAAK,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI;YAClC,CAAC,EAAE,MAAK,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG;SAClC,CAAC;KACH;IAED,sBAAsB;IACtB,mBAAmB;IACnB,qCAAqC;IACrC,YAAY,CAAC,MAAK,EAAE;QAClB,uBAAuB;QACvB,MAAM,QAAQ,GAAG,MAAK,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,AAAC,EAAC,WAAW;QAC9E,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;QACxC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,WAAW,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa;QACzD,MAAK,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/C,2CAA2C;QAC3C,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC1C;IAED,qBAAqB;IACrB,mBAAmB;IACnB,aAAa,GAAG;QACd,MAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,AAAC;QAClE,IAAI,CAAC,IAAI,GAAG,QAAQ,GAAG,MAAM,GAAG,QAAQ,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,GAAG,SAAS,GAAG,WAAW,CAAC;QAChE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/C,4CAA4C;QAC5C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACzC;IAED,aAAa;IACb,gBAAgB,CAAC,MAAK,EAAE;QACtB,yCAAyC;QACzC,IAAI,CAAC,kBAAkB,GAAG,CAAC,MAAK,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,uBAAuB;QACpG,MAAK,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACxD,0CAA0C;QAC1C,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAED,0EAA0E;IAC1E,qDAAqD;IACrD,eAAe,GAAG;QAChB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,OAAO;QACrC,IAAI,CAAC,gBAAgB,CAAC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;KACvD;IAED,OAAO;IACP,WAAW,GAAG;QACZ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAC3B,OAAO;SACR;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,OAAO;QACxC,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,AAAC,EAAC,gBAAgB;QAC5D,IAAI,aAAa,GAAG,IAAI,KAAK,EAAE,AAAC,EAAC,eAAe;QAChD,aAAa,CAAC,MAAM,GAAG,IAAM;YAC3B,iCAAiC;YACjC,wBAAwB;YACxB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAExE,iCAAiC;YACjC,mDAAmD;YACnD,IAAI,CAAC,OAAO,CAAC,SAAS,CACpB,aAAa,EACb,CAAC,EACD,CAAC,EACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB,CAAC,EACD,CAAC,EACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EACnB,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;SACH,CAAC;QACF,aAAa,CAAC,GAAG,GAAG,eAAe,CAAC;KACrC;IAED,uBAAuB;IACvB,0BAA0B;IAC1B,SAAS,GAAG;QACV,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;SAChD,MACC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;IAEjD,+BAA+B;KAChC;IAED,UAAU;IACV,YAAY,GAAG;QACb,UAAU;QACV,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,yBAAyB,EAAE,CAAC;KAClC;CACF;AAED,UAAU;AACV,IAAI,YAAY,EAAE,CAAC","sources":["src/js/index.js"],"sourcesContent":["console.log('그림판');\r\n\r\nclass DrawingBoard {\r\n  MODE = 'NONE'; // 브러시 모드 : NONE BRUSH ERASER\r\n  IsMouseDown = false; // T/F\r\n  eraserColor = '#FFFFFF'; // 지우개 변수\r\n  backgroundColor = '#FFFFFF'; // 배경색 변수\r\n  IsNavigatorVisible = false; // T/F\r\n  undoArray = [];\r\n  containerEl;\r\n  canvasEl;\r\n  toolbarEl;\r\n  brushEl;\r\n  colorPickerEl;\r\n  brushPanelEl;\r\n  brushSliderEl;\r\n  brushSizePreviewEl;\r\n  eraserEl;\r\n  navigatorEl;\r\n  navigatorImageContainerEl;\r\n  navigatorImageEl;\r\n  undoEl;\r\n  clearEl;\r\n\r\n  constructor() {\r\n    this.assignElement();\r\n    this.initContext();\r\n    this.initCanvasBackgroundColor();\r\n    this.addEvent();\r\n  }\r\n\r\n  assignElement() {\r\n    this.containerEl = document.getElementById('container');\r\n    this.canvasEl = this.containerEl.querySelector('#canvas');\r\n    this.toolbarEl = this.containerEl.querySelector('#toolbar');\r\n    this.brushEl = this.toolbarEl.querySelector('#brush');\r\n    this.colorPickerEl = this.toolbarEl.querySelector('#colorPicker');\r\n    this.brushPanelEl = this.containerEl.querySelector('#brushPanel');\r\n    this.brushSliderEl = this.brushPanelEl.querySelector('#brushSize');\r\n    this.brushSizePreviewEl =\r\n      this.brushPanelEl.querySelector('#brushSizePreview');\r\n    this.eraserEl = this.toolbarEl.querySelector('#eraser');\r\n    this.navigatorEl = this.toolbarEl.querySelector('#navigator');\r\n    this.navigatorImageContainerEl = this.containerEl.querySelector('#imgNav');\r\n    this.navigatorImageEl = this.containerEl.querySelector('#canvasImg');\r\n    this.undoEl = this.toolbarEl.querySelector('#undo');\r\n    this.clearEl = this.toolbarEl.querySelector('#clear');\r\n  }\r\n\r\n  // 2D 캔버스 구현\r\n  initContext() {\r\n    this.context = this.canvasEl.getContext('2d');\r\n  }\r\n\r\n  // 캔버스 초기화 (초기화 시 캔버스 크기만큼의 직사각형을 그리고 시작하는 개념)\r\n  initCanvasBackgroundColor() {\r\n    this.context.fillStyle = this.backgroundColor;\r\n    this.context.fillRect(0, 0, this.canvasEl.width, this.canvasEl.height); // fillRect(직사각형 그리기) : 캔버스 기준 0,0 좌표가 시작되는 지점, 캔버스의 너비, 캔버스 높이\r\n  }\r\n\r\n  addEvent() {\r\n    this.brushEl.addEventListener('click', this.onClickBrush.bind(this));\r\n    this.canvasEl.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n    this.canvasEl.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n    this.canvasEl.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n    this.canvasEl.addEventListener('mouseout', this.onMouseOut.bind(this));\r\n    this.brushSliderEl.addEventListener(\r\n      'input',\r\n      this.onChangeBrushSize.bind(this),\r\n    );\r\n    this.colorPickerEl.addEventListener('input', this.onChangeColor.bind(this));\r\n    this.eraserEl.addEventListener('click', this.onClickEraser.bind(this));\r\n    this.navigatorEl.addEventListener(\r\n      'click',\r\n      this.onClickNavigator.bind(this),\r\n    );\r\n    this.undoEl.addEventListener('click', this.onClickUndo.bind(this));\r\n    this.clearEl.addEventListener('click', this.onClickClear.bind(this));\r\n  }\r\n\r\n  onMouseOut() {\r\n    if (this.MODE === 'NONE') return; // 브러시 모드가 NONE이면 진입 불가 (반환)\r\n    this.IsMouseDown = false;\r\n    this.updateNavigator();\r\n  }\r\n\r\n  // 브러시 패널에 선택한 컬러피커의 색상 적용\r\n  onChangeColor(event) {\r\n    this.brushSizePreviewEl.style.backgroundColor = event.target.value;\r\n  }\r\n\r\n  // 브러시 패널에서 슬라이더로 브러시 사이즈 조정\r\n  onChangeBrushSize(event) {\r\n    this.brushSizePreviewEl.style.width = `${event.target.value}px`;\r\n    this.brushSizePreviewEl.style.height = `${event.target.value}px`;\r\n  }\r\n\r\n  // 마우스를 누를 때\r\n  onMouseDown(event) {\r\n    if (this.MODE === 'NONE') return; // 브러시 모드가 NONE이면 진입 불가 (반환)\r\n    this.IsMouseDown = true;\r\n    const currentPosition = this.getMousePosition(event);\r\n\r\n    // 2D 캔버스 그리기\r\n    this.context.beginPath(); // 경로 시작\r\n    this.context.moveTo(currentPosition.x, currentPosition.y); // 현재 좌표로 이동\r\n    this.context.lineCap = 'round'; // 펜팁\r\n\r\n    // this.context.strokeStyle = '#000000'; // 선 색상\r\n    // this.context.lineWidth = 10; // 두께\r\n    // this.context.lineTo(400, 400); // 캔버스 기준 x:400, y:400\r\n    // this.context.stroke(); // 그리기\r\n\r\n    // 조건문으로 변경\r\n    if (this.MODE === 'BRUSH') {\r\n      this.context.strokeStyle = this.colorPickerEl.value; // 컬러피커의 값\r\n      this.context.lineWidth = this.brushSliderEl.value; // 브러시슬라이더의 값\r\n    } else if (this.MODE === 'ERASER') {\r\n      // 지우개를 배경색(흰색)인 브러시로 덮는 개념이라고 보면 됨\r\n      this.context.strokeStyle = this.eraserColor;\r\n      this.context.lineWidth = 50;\r\n    }\r\n\r\n    this.saveState();\r\n  }\r\n\r\n  // 마우스를 움직일 때\r\n  onMouseMove(event) {\r\n    if (!this.IsMouseDown) return; // 마우스를 누른 게 아니면 진입 불가 (반환)\r\n\r\n    const currentPosition = this.getMousePosition(event);\r\n    this.context.lineTo(currentPosition.x, currentPosition.y); // 현재 좌표로 이동\r\n    this.context.stroke(); // 그리기\r\n  }\r\n\r\n  // 마우스를 뗐을 때 = 마우스를 누른 게 아닌 상태\r\n  onMouseUp() {\r\n    if (this.MODE === 'NONE') return; // 브러시 모드가 NONE이면 진입 불가 (반환)\r\n    this.IsMouseDown = false;\r\n    this.updateNavigator();\r\n  }\r\n\r\n  // 마우스 좌표\r\n  getMousePosition(event) {\r\n    const boundaries = this.canvasEl.getBoundingClientRect(); // 좌표 값 구하기\r\n    return {\r\n      x: event.clientX - boundaries.left, // 현재 캔버스기준 가로 시작점 부터 엘리먼트 왼쪽변 까지의 거리\r\n      y: event.clientY - boundaries.top, // 현재 캔버스기준 세로 시작점 부터 엘리먼트 윗변 까지의 거리\r\n    };\r\n  }\r\n\r\n  // 브러시를 클릭했을 때 이벤트 핸들러\r\n  // 브러시를 눌렀을 때 상태 변경\r\n  // (공통) 툴 클릭 시 active 클래스 추가 (활성화 상태)\r\n  onClickBrush(event) {\r\n    // this.MODE = 'BRUSH';\r\n    const IsActive = event.currentTarget.classList.contains('active'); // 반복 코드 정리\r\n    this.MODE = IsActive ? 'NONE' : 'BRUSH';\r\n    this.canvasEl.style.cursor = IsActive ? 'default' : 'crosshair';\r\n    this.brushPanelEl.classList.toggle('hide'); // 브러시 패널 활성화\r\n    event.currentTarget.classList.toggle('active');\r\n    // this.brushEl.classList.toggle('active');\r\n    this.eraserEl.classList.remove('active');\r\n  }\r\n\r\n  // 지우개 기능 (브러시 기능 응용)\r\n  // 지우개를 눌렀을 때 상태 변경\r\n  onClickEraser() {\r\n    const IsActive = event.currentTarget.classList.contains('active');\r\n    this.MODE = IsActive ? 'NONE' : 'ERASER';\r\n    this.canvasEl.style.cursor = IsActive ? 'default' : 'crosshair';\r\n    this.brushPanelEl.classList.add('hide');\r\n    event.currentTarget.classList.toggle('active');\r\n    // this.eraserEl.classList.toggle('active');\r\n    this.brushEl.classList.remove('active');\r\n  }\r\n\r\n  // 네비게이터(미니맵)\r\n  onClickNavigator(event) {\r\n    // 네비게이터가 보이지 않는 경우 그리고 있는 상태가 업데이트되지 않도록\r\n    this.IsNavigatorVisible = !event.currentTarget.classList.contains('active'); // active를 포함하지 않는 (반대)\r\n    event.currentTarget.classList.toggle('active');\r\n    this.navigatorImageContainerEl.classList.toggle('hide');\r\n    // console.log(this.canvasEl.toDataURL());\r\n    this.updateNavigator();\r\n  }\r\n\r\n  // 현재 캔버스 상태를 이미지 형태로 변환하여 canvasImg에 src 형태로 업데이트하여 네비게이터(미니맵)으로 보여줄 수 있다\r\n  // 단, 너무 자주 업데이트 시 버벅거리는 현상 > 마우스를 떼거나 밖으로 나갔을 때 업데이트\r\n  updateNavigator() {\r\n    if (!this.IsNavigatorVisible) return;\r\n    this.navigatorImageEl.src = this.canvasEl.toDataURL();\r\n  }\r\n\r\n  // 실행취소\r\n  onClickUndo() {\r\n    if (this.undoArray.length === 0) {\r\n      alert('더 이상 실행취소는 불가합니다.');\r\n      return;\r\n    }\r\n\r\n    if (this.undoArray.length === 0) return;\r\n    let previousDataUrl = this.undoArray.pop(); // 배열의 마지막 요소 제거\r\n    let previousImage = new Image(); // 이전 이미지 객체 생성\r\n    previousImage.onload = () => {\r\n      // clearRect : 캔버스의 특정 영역 지우는 메소드\r\n      // clearRect(x, y, w, h)\r\n      this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n\r\n      // drawImage : 캔버스에서 이미지를 그리는 메소드\r\n      // drawImage(image, ix, iy, iw, ih, cx, cy, cw, ch)\r\n      this.context.drawImage(\r\n        previousImage,\r\n        0,\r\n        0,\r\n        this.canvasEl.width,\r\n        this.canvasEl.height,\r\n        0,\r\n        0,\r\n        this.canvasEl.width,\r\n        this.canvasEl.height,\r\n      );\r\n    };\r\n    previousImage.src = previousDataUrl;\r\n  }\r\n\r\n  // 상태 저장 (최근 5개까지만 상태만)\r\n  // 데이터를 배열(array)로 만들어서 저장\r\n  saveState() {\r\n    if (this.undoArray.length > 4) {\r\n      this.undoArray.shift();\r\n      this.undoArray.push(this.canvasEl.toDataURL());\r\n    } else {\r\n      this.undoArray.push(this.canvasEl.toDataURL());\r\n    }\r\n    // console.log(this.undoArray);\r\n  }\r\n\r\n  // 캔버스 초기화\r\n  onClickClear() {\r\n    // 캔버스 지우기\r\n    this.context.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n    this.undoArray = [];\r\n    this.updateNavigator();\r\n    this.initCanvasBackgroundColor();\r\n  }\r\n}\r\n\r\n// 인스턴스 생성\r\nnew DrawingBoard();\r\n"],"names":[],"version":3,"file":"index.de5c0784.js.map","sourceRoot":"/__parcel_source_root/"}