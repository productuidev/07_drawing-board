{"mappings":"AAAAA,QAAQC,IAAI,OAEZ,MAAMC,aACJC,KAAO,OACPC,aAAc,EAEdC,cACEC,KAAKC,gBACLD,KAAKE,cACLF,KAAKG,U,CAGPF,gBACED,KAAKI,YAAcC,SAASC,eAAe,aAC3CN,KAAKO,SAAWP,KAAKI,YAAYI,cAAc,WAC/CR,KAAKS,UAAYT,KAAKI,YAAYI,cAAc,YAChDR,KAAKU,QAAUV,KAAKI,YAAYI,cAAc,UAC9CR,KAAKW,cAAgBX,KAAKI,YAAYI,cAAc,gBACpDR,KAAKY,aAAeZ,KAAKI,YAAYI,cAAc,eACnDR,KAAKa,cAAgBb,KAAKY,aAAaJ,cAAc,cACrDR,KAAKc,mBACHd,KAAKY,aAAaJ,cAAc,oB,CAIpCN,cACEF,KAAKe,QAAUf,KAAKO,SAASS,WAAW,K,CAG1Cb,WACEH,KAAKU,QAAQO,iBAAiB,QAASjB,KAAKkB,aAAaC,KAAKnB,OAC9DA,KAAKO,SAASU,iBAAiB,YAAajB,KAAKoB,YAAYD,KAAKnB,OAClEA,KAAKO,SAASU,iBAAiB,YAAajB,KAAKqB,YAAYF,KAAKnB,OAClEA,KAAKO,SAASU,iBAAiB,UAAWjB,KAAKsB,UAAUH,KAAKnB,OAC9DA,KAAKO,SAASU,iBAAiB,WAAYjB,KAAKuB,WAAWJ,KAAKnB,OAChEA,KAAKa,cAAcI,iBACjB,QACAjB,KAAKwB,kBAAkBL,KAAKnB,OAE9BA,KAAKW,cAAcM,iBAAiB,QAASjB,KAAKyB,cAAcN,KAAKnB,M,CAGvEuB,aACoB,SAAdvB,KAAKH,OACTG,KAAKF,aAAc,E,CAIrB2B,cAAcC,GACZ1B,KAAKc,mBAAmBa,MAAMC,gBAAkBF,EAAMG,OAAOC,K,CAI/DN,kBAAkBE,GAChB1B,KAAKc,mBAAmBa,MAAMI,MAAQ,GAAGL,EAAMG,OAAOC,UACtD9B,KAAKc,mBAAmBa,MAAMK,OAAS,GAAGN,EAAMG,OAAOC,S,CAIzDV,YAAYM,GACV,GAAkB,SAAd1B,KAAKH,KAAiB,OAC1BG,KAAKF,aAAc,EACnB,MAAMmC,EAAkBjC,KAAKkC,iBAAiBR,GAG9C1B,KAAKe,QAAQoB,YACbnC,KAAKe,QAAQqB,OAAOH,EAAgBI,EAAGJ,EAAgBK,GACvDtC,KAAKe,QAAQwB,QAAU,QAOvBvC,KAAKe,QAAQyB,YAAcxC,KAAKW,cAAcmB,MAC9C9B,KAAKe,QAAQ0B,UAAYzC,KAAKa,cAAciB,K,CAI9CT,YAAYK,GACV,IAAK1B,KAAKF,YAAa,OAEvB,MAAMmC,EAAkBjC,KAAKkC,iBAAiBR,GAC9C1B,KAAKe,QAAQ2B,OAAOT,EAAgBI,EAAGJ,EAAgBK,GACvDtC,KAAKe,QAAQ4B,Q,CAIfrB,YACoB,SAAdtB,KAAKH,OACTG,KAAKF,aAAc,E,CAIrBoC,iBAAiBR,GACf,MAAMkB,EAAa5C,KAAKO,SAASsC,wBACjC,MAAO,CACLR,EAAGX,EAAMoB,QAAUF,EAAWG,KAC9BT,EAAGZ,EAAMsB,QAAUJ,EAAWK,I,CAOlC/B,aAAaQ,GAEX,MAAMwB,EAAWxB,EAAMyB,cAAcC,UAAUC,SAAS,UACxDrD,KAAKH,KAAOqD,EAAW,OAAS,QAChClD,KAAKO,SAASoB,MAAM2B,OAASJ,EAAW,UAAY,YAEpDlD,KAAKY,aAAawC,UAAUG,OAAO,QAEnCvD,KAAKU,QAAQ0C,UAAUG,OAAO,S,EAKlC,IAAI3D","sources":["src/js/index.js"],"sourcesContent":["console.log('그림판');\r\n\r\nclass DrawingBoard {\r\n  MODE = 'NONE'; // 브러시 모드 : NONE BRUSH ERASER\r\n  IsMouseDown = false; // T/F\r\n\r\n  constructor() {\r\n    this.assignElement();\r\n    this.initContext();\r\n    this.addEvent();\r\n  }\r\n\r\n  assignElement() {\r\n    this.containerEl = document.getElementById('container');\r\n    this.canvasEl = this.containerEl.querySelector('#canvas');\r\n    this.toolbarEl = this.containerEl.querySelector('#toolbar');\r\n    this.brushEl = this.containerEl.querySelector('#brush');\r\n    this.colorPickerEl = this.containerEl.querySelector('#colorPicker');\r\n    this.brushPanelEl = this.containerEl.querySelector('#brushPanel');\r\n    this.brushSliderEl = this.brushPanelEl.querySelector('#brushSize');\r\n    this.brushSizePreviewEl =\r\n      this.brushPanelEl.querySelector('#brushSizePreview');\r\n  }\r\n\r\n  // 2D 캔버스 구현\r\n  initContext() {\r\n    this.context = this.canvasEl.getContext('2d');\r\n  }\r\n\r\n  addEvent() {\r\n    this.brushEl.addEventListener('click', this.onClickBrush.bind(this));\r\n    this.canvasEl.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n    this.canvasEl.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n    this.canvasEl.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n    this.canvasEl.addEventListener('mouseout', this.onMouseOut.bind(this));\r\n    this.brushSliderEl.addEventListener(\r\n      'input',\r\n      this.onChangeBrushSize.bind(this),\r\n    );\r\n    this.colorPickerEl.addEventListener('input', this.onChangeColor.bind(this));\r\n  }\r\n\r\n  onMouseOut() {\r\n    if (this.MODE === 'NONE') return; // 브러시 모드가 NONE이면 진입 불가 (반환)\r\n    this.IsMouseDown = false;\r\n  }\r\n\r\n  // 브러시 패널에 선택한 컬러피커의 색상 적용\r\n  onChangeColor(event) {\r\n    this.brushSizePreviewEl.style.backgroundColor = event.target.value;\r\n  }\r\n\r\n  // 브러시 패널에서 슬라이더로 브러시 사이즈 조정\r\n  onChangeBrushSize(event) {\r\n    this.brushSizePreviewEl.style.width = `${event.target.value}px`;\r\n    this.brushSizePreviewEl.style.height = `${event.target.value}px`;\r\n  }\r\n\r\n  // 마우스를 누를 때\r\n  onMouseDown(event) {\r\n    if (this.MODE === 'NONE') return; // 브러시 모드가 NONE이면 진입 불가 (반환)\r\n    this.IsMouseDown = true;\r\n    const currentPosition = this.getMousePosition(event);\r\n\r\n    // 2D 캔버스 그리기\r\n    this.context.beginPath(); // 경로 시작\r\n    this.context.moveTo(currentPosition.x, currentPosition.y); // 현재 좌표로 이동\r\n    this.context.lineCap = 'round'; // 펜팁\r\n\r\n    // this.context.strokeStyle = '#000000'; // 선 색상\r\n    // this.context.lineWidth = 10; // 두께\r\n    // this.context.lineTo(400, 400); // 캔버스 기준 x:400, y:400\r\n    // this.context.stroke(); // 그리기\r\n\r\n    this.context.strokeStyle = this.colorPickerEl.value; // 컬러피커의 값\r\n    this.context.lineWidth = this.brushSliderEl.value; // 브러시슬라이더의 값\r\n  }\r\n\r\n  // 마우스를 움직일 때\r\n  onMouseMove(event) {\r\n    if (!this.IsMouseDown) return; // 마우스를 누른 게 아니면 진입 불가 (반환)\r\n\r\n    const currentPosition = this.getMousePosition(event);\r\n    this.context.lineTo(currentPosition.x, currentPosition.y); // 현재 좌표로 이동\r\n    this.context.stroke(); // 그리기\r\n  }\r\n\r\n  // 마우스를 뗐을 때 = 마우스를 누른 게 아닌 상태\r\n  onMouseUp() {\r\n    if (this.MODE === 'NONE') return; // 브러시 모드가 NONE이면 진입 불가 (반환)\r\n    this.IsMouseDown = false;\r\n  }\r\n\r\n  // 마우스 좌표\r\n  getMousePosition(event) {\r\n    const boundaries = this.canvasEl.getBoundingClientRect(); // 좌표 값 구하기\r\n    return {\r\n      x: event.clientX - boundaries.left, // 현재 캔버스기준 가로 시작점 부터 엘리먼트 왼쪽변 까지의 거리\r\n      y: event.clientY - boundaries.top, // 현재 캔버스기준 세로 시작점 부터 엘리먼트 윗변 까지의 거리\r\n    };\r\n  }\r\n\r\n  // 브러시를 클릭했을 때 이벤트 핸들러\r\n  // 브러시를 눌렀을 때 상태 변경\r\n  // (공통) 툴 클릭 시 active 클래스 추가 (활성화 상태)\r\n  onClickBrush(event) {\r\n    // this.MODE = 'BRUSH';\r\n    const IsActive = event.currentTarget.classList.contains('active'); // 반복 코드 정리\r\n    this.MODE = IsActive ? 'NONE' : 'BRUSH';\r\n    this.canvasEl.style.cursor = IsActive ? 'default' : 'crosshair';\r\n\r\n    this.brushPanelEl.classList.toggle('hide'); // 브러시 패널 활성화\r\n\r\n    this.brushEl.classList.toggle('active');\r\n  }\r\n}\r\n\r\n// 인스턴스 생성\r\nnew DrawingBoard();\r\n"],"names":["console","log","DrawingBoard","MODE","IsMouseDown","constructor","this","assignElement","initContext","addEvent","containerEl","document","getElementById","canvasEl","querySelector","toolbarEl","brushEl","colorPickerEl","brushPanelEl","brushSliderEl","brushSizePreviewEl","context","getContext","addEventListener","onClickBrush","bind","onMouseDown","onMouseMove","onMouseUp","onMouseOut","onChangeBrushSize","onChangeColor","event","style","backgroundColor","target","value","width","height","currentPosition","getMousePosition","beginPath","moveTo","x","y","lineCap","strokeStyle","lineWidth","lineTo","stroke","boundaries","getBoundingClientRect","clientX","left","clientY","top","IsActive","currentTarget","classList","contains","cursor","toggle"],"version":3,"file":"index.9ad85f75.js.map"}